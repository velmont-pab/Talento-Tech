"""
ventana_dinamica_scroll_fina.py
--------------------------------
Versi√≥n mejorada de la ventana din√°mica con scroll en Tkinter.

‚úî La barra de desplazamiento (scrollbar) se mantiene siempre a la derecha.
‚úî El √°rea de texto se adapta din√°micamente al tama√±o de la ventana.
‚úî Se utiliza un Canvas + Frame correctamente configurado para desplazamiento fluido.
‚úî Incluye comentarios detallados y docstrings explicativos.
"""

import tkinter as tk
from tkinter import ttk


def crear_ventana():
    """Crea la ventana principal con √°rea de texto din√°mica y scroll correctamente alineado."""

    # ==============================
    # 1Ô∏è‚É£ Ventana principal
    # ==============================
    ventana = tk.Tk()
    ventana.title("Ventana din√°mica con scroll alineado ü™ü")
    ventana.geometry("800x500")
    ventana.minsize(400, 250)

    # Permite que la fila y columna 0 se expandan con la ventana
    ventana.rowconfigure(0, weight=1)
    ventana.columnconfigure(0, weight=1)

    # ==============================
    # 2Ô∏è‚É£ Frame principal (contenedor)
    # ==============================
    frame_principal = ttk.Frame(ventana)
    frame_principal.grid(row=0, column=0, sticky="nsew")

    # Permitir expansi√≥n en el frame
    frame_principal.rowconfigure(0, weight=1)
    frame_principal.columnconfigure(0, weight=1)

    # ==============================
    # 3Ô∏è‚É£ Canvas (√°rea de scroll) + Scrollbar
    # ==============================
    canvas = tk.Canvas(frame_principal, highlightthickness=0)
    canvas.grid(row=0, column=0, sticky="nsew")

    # Scrollbar vertical ‚Äî siempre visible a la derecha del canvas
    scrollbar = ttk.Scrollbar(frame_principal, orient="vertical", command=canvas.yview)
    scrollbar.grid(row=0, column=1, sticky="ns")

    # Conectar scroll ‚Üî canvas
    canvas.configure(yscrollcommand=scrollbar.set)

    # ==============================
    # 4Ô∏è‚É£ Frame interior dentro del canvas (contenido real)
    # ==============================
    contenido_frame = ttk.Frame(canvas)
    contenido_window = canvas.create_window((0, 0), window=contenido_frame, anchor="nw")

    # ==============================
    # 5Ô∏è‚É£ Contenido din√°mico dentro del frame
    # ==============================
    texto = (
        "üåü Ejemplo de ventana din√°mica con scroll siempre alineado a la derecha üåü\n\n"
        "Este texto se ajusta autom√°ticamente al ancho de la ventana, "
        "y la barra de desplazamiento acompa√±a el tama√±o del contenido.\n\n"
        "üîπ Si haces la ventana m√°s grande ‚Üí el texto se expande.\n"
        "üîπ Si la achicas ‚Üí aparece el scroll para desplazarte.\n\n"
        "Tkinter no tiene un contenedor 'scrollable' por defecto, "
        "pero combinando un Canvas con un Frame interno podemos lograrlo f√°cilmente.\n\n"
        "Este ejemplo usa 'grid' con pesos (weight) para que todo crezca de forma fluida.\n\n"
        "Prueba redimensionar la ventana y observa c√≥mo la barra de desplazamiento "
        "permanece siempre visible a la derecha, mientras que el texto se adapta.\n\n"
        * 3)

    label_texto = tk.Label(
        contenido_frame,
        text=texto,
        justify="left",
        font=("Arial", 13),
        wraplength=700,  # se actualizar√° din√°micamente
        bg="#f5f5f5",
        padx=20,
        pady=20,
    )
    label_texto.pack(fill="both", expand=True)

    # ==============================
    # 6Ô∏è‚É£ Funciones din√°micas
    # ==============================

    def actualizar_scroll(event=None):
        """Ajusta el √°rea visible del scroll al tama√±o del contenido actual."""
        canvas.configure(scrollregion=canvas.bbox("all"))

    def ajustar_texto(event=None):
        """
        Ajusta autom√°ticamente el ancho del texto (wraplength)
        al ancho actual de la ventana, menos un margen.
        """
        ancho_ventana = ventana.winfo_width()
        nuevo_wrap = max(300, ancho_ventana - 100)
        label_texto.config(wraplength=nuevo_wrap)

        # Ajustar el ancho del frame de contenido al canvas
        canvas.itemconfig(contenido_window, width=canvas.winfo_width())

        # Actualizar scroll
        actualizar_scroll()

    # Vincular eventos
    contenido_frame.bind("<Configure>", actualizar_scroll)
    ventana.bind("<Configure>", ajustar_texto)

    # ==============================
    # 7Ô∏è‚É£ Iniciar el bucle principal
    # ==============================
    ventana.mainloop()


# ==============================
# üèÅ Punto de entrada principal
# ==============================
if __name__ == "__main__":
    crear_ventana()
